Arrow functions are different—they do not bind their own this, but can see the this binding of the scope around them. Thus you can do something like the following code, which references this from inside a local function.

function normalize() {
  console.log(this.coords.map(n => n / this.length));
}
normalize.call({coords: [0, 2, 3], length: 5});
// → [0, 0.4, 0.6]



let x = {} <===> let x = new Object();

[[Prototype]]
==> Internal property of every object.
==> to find the prototype of an object: 'getPrototypeOf()'
==> 'x.getPrototypeOf()' equal to 'x.__proto__'; (__proto__ is legacy) 

==> Constructor function is a regular function
==> It oly becomes a constructor when it is called with new

//////////////////////////

constructor function:
    function makeRabbit(type) {
        let rabbit = Object.create(protoRabbit);
        rabbit.type = type;
        return rabbit;
    }

constructor function (shortcut):

function Rabbit(type) {
    this.type = type;
}
Rabbit.prototype.speak = function(line) {
  console.log(`The ${this.type} rabbit says '${line}'`);
};
let someRabbit = new Rabbite("someRabbit");


class Rabbit {
  constructor(type) {
    this.type = type;
  }
  speak(line) {
    console.log(`The ${this.type} rabbit says '${line}'`);
  }
}

let someRabbit = new Rabbit("someRabbit");